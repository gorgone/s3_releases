#!/bin/bash

debian_os(){
[ -f /etc/os-release ] && source /etc/os-release || return 1;
install_log="$ldir/os-install.log";
failed=0;
packages="";

for e in "${binvars[@]}";
do
	if [ "$e" == "autoconf-archive" ]; then
		if [ ! -f "/usr/share/aclocal/ax_absolute_header.m4" ]; then
			printf -v pad %40s; e=$e$pad; e=${e:0:16};
			echo -e "$w_l  select $g_l$e$y_l from: $e";
			packages+=" $e";
		else
			continue;
		fi;
	elif ! hash "$e" 2>/dev/null; then
		inst="$e"; build="";
		case $e in
		upx)
			build="upx deb installer"
			inst="";
			;;
		xz)
			inst="xz-utils";
			;;
		makeinfo)
			inst="texinfo";
			;;
		python3-config)
			inst="python3-dev";
			;;
		libtoolize)
			inst="libtool";
			;;
		libtool)
			inst="libtool-bin";
			;;
		composite)
			inst="imagemagick";
			;;
		cmp)
			inst="diffutils";
			;;
		esac;
		printf -v pad %40s; e=$e$pad; e=${e:0:15};
		echo -e "$w_l  select $g_l$e$y_l from: $inst$build";
		packages+=" $inst";
		builder+=" $build"
	fi;
done;

for e in "${headervars[@]}";
do
	e1=$(find /usr/include/* /usr/local/include/* 2>/dev/null | grep -wm1 "$e")
	if [ ! ${#e1} -gt 8 ]; then
		build="";
		case $e in
		crypto.h)
				inst="libssl-dev";
			;;
		opensslconf.h)
				inst="libssl-dev";
			;;
		libusb.h)
				inst="libusb-1.0.0-dev";
			;;
		pcsclite.h)
				inst="libpcsclite-dev";
			;;
		pthread.h)
				inst="libc-dev-bin";
			;;
		dvbcsa.h)
				build="libdvbcsa source builder";
				inst="";
			;;
		ncurses)
				inst="libncurses-dev";
			;;
		libacl.h)
				inst="libacl1-dev";
			;;
		sys/capability.h)
				inst="libcap-dev";
			;;
		readline.h)
				inst="libreadline-dev";
			;;
		glib-2.0/glib.h)
				inst="libglib2.0-dev";
			;;
		esac;
		printf -v pad %40s; e=$e$pad; e=${e:0:15};
		echo -e "$w_l  select $g_l$e$y_l from: $inst$build";
		packages+=" $inst";
		builder+=" $build"
	fi;
done;

for e in "${libvars[@]}";
do
	e1=$(find /usr/lib* |grep -m1 "$e");
	if [ ! ${#e1} -gt 8 ]; then
		case $e in
		libccidtwin.so)
				inst="libccid";
			;;
		libstdc++.so.6)
				inst="libstdc++6";
			;;
		esac;
		printf -v pad %40s; e=$e$pad; e=${e:0:15};
		echo -e "$w_l  select $g_l$e$y_l from: $inst";
		packages+=" $inst";
	fi;
done;

if [ "$(uname -m)" == "x86_64" ] && [ ! -f /usr/lib32/libz.so.1 ]; then
	if [ ! -f /usr/lib32/libz.so.1 ]; then
		e="zlib32";
		inst="lib32z1";
		printf -v pad %40s; e=$e$pad; e=${e:0:15};
		echo -e "$w_l  select $g_l$e$y_l from: $inst";
		packages+=" $inst";
	fi
fi

packages="$(echo "$packages" | xargs)"
echo -n >"$install_log" &2>/dev/null;
if [ ${#packages} -gt 0 ]; then
	echo -e "$w_l\n  INSTALLATION\n  ============" | _log "$install_log";
	[[ "$prefix" =~ ^su[[:space:]].* ]] && echo -en "$r_l\n  (apt-get installer) Enter $rootuser ";
	$prefix "
			printf '\033[1;37m\n  update\033[1;32m package list...\n\n';
			apt-get -y update |grep --line-buffered -v '^T\|(\|^I\|^H' 2>&1;
			printf '\n\033[1;37m  install\033[1;32m $txt_selected packages\033[1;33m $txt_wait \n\n';
			apt-get -y -qq install $packages |grep --line-buffered '(' |grep --line-buffered -v 'not\|nicht\|dpkg';
	" |& _log "$install_log"
fi;

if [[ "$builder" =~ upx ]]; then
	echo -e "$w_l\n  INSTALL PRECOMPILED BINARY\n  ==========================" | _log "$install_log";
	upx_native_installer
fi

if [[ "$builder" =~ libdvbcsa ]]; then
	echo -e "$w_l\n  BUILD FROM SOURCE\n  =================" | _log "$install_log";
	libdvbcsa_native_installer
fi

[ $failed == 1 ] && echo -e "\n$r_l  Installation with errors - see: $install_log";

return $failed;
}
