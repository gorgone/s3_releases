#!/bin/bash

prerequisites(){
	failed=0
	missing="(not found)"
	[[ $1 ]] && output=": &&" || output="printf";
	$output "$w_l  CHECK for binaries\n  ==================\n";

	for e in "${binvars[@]}"
	do
		if [ "$e" == "autoconf-archive" ]
		then
			e="autoconf-archive"
			e1="/usr/share/aclocal/ax_absolute_header.m4"
			if [ -f $e1 ]
			then
				printf -v pad %40s
				e=$e$pad
				e=${e:0:16}
				$output "$w_l  have\t$g_l$e$y_l $e1\n"
			else
				failed=1
				printf -v pad %40s
				e=$e$pad
				e=${e:0:16}
				$output "$r_l  need\t$w_l$e$r_l $missing\n"
			fi
		elif hash "$e" 2>/dev/null
		then
			einfo=$(type -pf "$e")
			printf -v pad %40s
			e=$e$pad
			e=${e:0:15}
			$output "$w_l  have\t$g_l$e $y_l$einfo\n"
		else
			failed=1
			printf -v pad %40s
			e=$e$pad
			e=${e:0:15}
			$output "$r_l  need\t$w_l$e $r_l$missing\n"
		fi
	done

	if hash upx 2>/dev/null; then
		upxversion=($(upx -V | awk 'NR==1 { verok=$2>=3.91; printf "%.2f %i", $2, verok }'));
		$output "$w_l  have$g_l  upx$y_l\t\t"$w_l"Version$P ${upxversion[0]}";
		if [ ${upxversion[1]} == 1 ]
		then
			$output "$g_l ok\n"
		else
			$output "$r_l nok\n"
			failed=1
		fi
	fi

	$output " \n $w_l CHECK for headers\n  =================\n"

	for e in "${headervars[@]}"
	do
		e1=$(find /usr/include/* /usr/local/include/* 2>/dev/null | grep -wm1 "$e")
		if [ ${#e1} -gt 8 ]
		  then
			printf -v pad %40s
			e=$e$pad
			e=${e:0:15}
			$output "$w_l  have\t$g_l$e$y_l $e1\n"
		elif [ "$e" == "dvbcsa.h" -a "${s3cfg_vars[INSTALL_NATIVE_LIBDVBCSA]}" == "0" ]
		  then
			printf -v pad %40s
			e=$e$pad
			e=${e:0:15}
			$output "$r_l  need\t$w_l$e$r_l (skipped by config)\n"
		else
			failed=1
			printf -v pad %40s
			e=$e$pad
			e=${e:0:15}
			$output "$r_l  need\t$w_l$e$r_l $missing\n"
		fi
	done

$output " \n $w_l CHECK for libraries\n  ===================\n"

for e in "${libvars[@]}"
do
	e1=$(find /usr/lib* 2>/dev/null | grep -m1 "$e")
	if [ ${#e1} -gt 8 ]
	then
		printf -v pad %40s
		e=$e$pad
		e=${e:0:15}
		$output "$w_l  have\t$g_l$e$y_l $e1\n"
	else
		failed=1
		printf -v pad %40s
		e=$e$pad
		e=${e:0:15}
		$output "$r_l  need\t$w_l$e$r_l $missing\n";
	fi
done

if [ "$(uname -m)" == "x86_64" ]
	then
	$output " \n $w_l CHECK for zlib32\n  ================\n"
	e="zlib32"
	e1="/usr/lib/libz.so"
	e2="/usr/lib32/libz.so.1"
	if [ -f $e1 ]
	then
		printf -v pad %40s
		e=$e$pad
		e=${e:0:15}
		$output "$w_l  have\t$g_l$e$y_l $e1\n"
	elif [ -f $e2 ]
		then
		printf -v pad %40s
		e=$e$pad
		e=${e:0:15}
		$output "$w_l  have\t$g_l$e$y_l $e2\n"
	else
		failed=1
		printf -v pad %40s
		e=$e$pad
		e=${e:0:15}
		$output "$r_l  need\t$w_l$e$r_l $missing\n"
	fi
fi

return $failed
}

# Parameters (all optional):
#   $1: installer name (or "auto")
#   $2: add architecture (not implemented yet)
#
# Example:
#   syscheck debian_os
#     call installer 'debian_os' (Do not care about the actual Linux distribution.)

syscheck(){
[[ $1 ]] && [ "$1" != "auto" ] && override="$1"
now=$2
if [ -d "$osdir" ]
then
	cd "$osdir"
	x=(*)
	for i in "${x[@]}"
	do
		source "$i"
	done
fi

unset binvars; unset headervars; unset libvars;
[ -z ${3+x} ] && binvars=( dialog grep gawk wget tar bzip2 git bc xz upx patch gcc g++ make automake autoconf autoconf-archive libtool jq scp sshpass openssl dos2unix curl ) || binvars=( $(echo "$3" | tr ' ' '\n') )
[ -z ${4+x} ] && headervars=( crypto.h libusb.h pcsclite.h pthread.h opensslconf.h dvbcsa.h ) || headervars=( $(echo "$4" | tr ' ' '\n') )
[ -z ${5+x} ] && libvars=( libccidtwin.so ) || libvars=( $(echo "$5" | tr ' ' '\n') )
sanity=1

if ! prerequisites silent || [ "$now" == "now" ]
then
	clear
	s3logo
	prerequisites
	sanity=0
	rootuser="$(ps -jf 1 | tail -n 1 | awk '{print $1}')"
	if [ "$EUID" -ne 0 ]; then
		! hash "sudo" 2>/dev/null && prefix="su $rootuser -c" || prefix="sudo sh -c"
	else
		prefix="sh -c"
	fi
	installer="unknown"

	# Debian and Ubuntu
	[ -f /etc/debian_version ] && installer="debian_os"

	# CentOS and Redhat
	[ -f /etc/redhat-release ] && installer="redhat_os"

	# Manjaro (/etc/os-release)
	[ -f /etc/manjaro-release ] || [ -f /etc/arch-release ] && installer="manjaro_os"

	# SuSE (/etc/SuSE-release is depreciated -> check for YaST2)
	[ -d /etc/YaST2 ] && installer="suse_os"

	# Optional override via parameter
	#[[ $override ]] && installer=$override;
	printf "\n$w_l  Selected installer:    $P$installer\n"

	if type -t "$installer" >/dev/null
	then
		$installer && prerequisites silent && sanity=1
	else
		printf "\n$r_l  Needs manual installation.\n"
	fi

	printf "$re_\n"
fi

return $sanity
}

upx_native_installer(){
	echo -e "$w_l  Installing ${g_l}upx$w_l precompiled binary..." | _log "$install_log"
	case $(uname -m) in
	  i386|i686)     HOST_ARCH="i386" ;;
	  aarch64|arm64) HOST_ARCH="arm64" ;;
	  arm*)          HOST_ARCH="arm" ;;
	  *)             HOST_ARCH="amd64" ;;
	esac;
	rm -rf "/tmp/upx_$HOST_ARCH.tar.xz" 2>/dev/null
	UPX_TAG="$(git ls-remote --sort=-version:refname https://github.com/upx/upx.git --tags v*.*.* | grep -v '5.0.0\|alpha\|beta\|\-pre\|\-rc\|\^' | awk -F'/' 'NR==1 {print $NF}')"
	echo -e "$w_l  ${g_l}upx$w_l version:$y_l $UPX_TAG ($HOST_ARCH)" | _log "$install_log"
	UPX_URL="$(curl --silent "https://api.github.com/repos/upx/upx/releases/tags/$UPX_TAG" | jq -r '.assets | .[] | select( (.name | contains("-'$HOST_ARCH'_")) and (.name | endswith(".tar.xz"))) | .browser_download_url' | sed -e 's#\"##g')"
	echo -e "$w_l  Downloading ${g_l}upx$w_l from $UPX_URL..." | _log "$install_log"
	curl --silent -L --output "/tmp/upx_$HOST_ARCH.tar.xz" "$UPX_URL";
	echo -e "$w_l  Installing ${g_l}upx$w_l to /usr/local/bin...$re_" | _log "$install_log"
	[[ "$prefix" =~ ^su[[:space:]].* ]] && echo -en "$r_l\n  (upx installer) Enter $rootuser Password: ";
	$prefix "
			(cd /usr/local/bin;
			 tar -xvf "/tmp/upx_$HOST_ARCH.tar.xz" $(tar -tf "/tmp/upx_$HOST_ARCH.tar.xz" | grep 'upx$') --strip-components=1);
	" |& _log "$install_log" &>/dev/null
	[[ "$prefix" =~ ^su[[:space:]].* ]] && echo
	rm -rf "/tmp/upx_$HOST_ARCH.tar.xz" 2>/dev/null
}

libdvbcsa_native_installer(){
	echo -e "$w_l  Installing ${g_l}libdvbcsa$w_l from source..." | _log "$install_log"
	FLAGS="$(cat /proc/cpuinfo | grep -im1 flags | awk -F':' '{print $2}')"
	FLAGS+="$(cat /proc/cpuinfo | grep -im1 features | awk -F':' '{print $2}')"
	echo -e "FLAGS=\"$FLAGS\"\n" |& _log "$install_log" &>/dev/null

	echo "$FLAGS" | grep -qiw 'altivec' && optimization="--enable-altivec"
	[ -z "$optimization" ] && echo "$FLAGS" | grep -qiw "avx2" && optimization="--enable-avx2"
	[ -z "$optimization" ] && echo "$FLAGS" | grep -qiw "ssse3" && optimization="--enable-ssse3"
	[ -z "$optimization" ] && echo "$FLAGS" | grep -qiw "sse2" && optimization="--enable-sse2"
	[ -z "$optimization" ] && echo "$FLAGS" | grep -qiw "mmx" && optimization="--enable-mmx"
	if [ -z "$optimization" ]; then
		if [ -n "$(find "/usr/lib" -name "arm_neon.h" -type f -print -quit)" ]; then
			echo "$FLAGS" | grep -qiw "neon\|simd\|asimd" && optimization="--enable-neon";
		fi;
	fi;
	[ -z "$optimization" ] && optimization="--enable-uint32"
	echo -e "$w_l  ${g_l}libdvbcsa$w_l optimization autodetection:$y_l $optimization" | _log "$install_log"

	rm -rf /tmp/libdvbcsa 2>/dev/null
	echo -e "\ngit clone https://github.com/oe-mirrors/libdvbcsa.git /tmp/libdvbcsa" |& _log "$install_log" &>/dev/null
	git clone https://github.com/oe-mirrors/libdvbcsa.git /tmp/libdvbcsa |& _log "$install_log" &>/dev/null
	cd /tmp/libdvbcsa

	echo -e "$w_l  Building ${g_l}libdvbcsa$w_l..." | _log "$install_log"
	echo -e "\n./bootstrap && ./configure $optimization" |& _log "$install_log" &>/dev/null
	(./bootstrap && ./configure $optimization) |& _log "$install_log" &>/dev/null
	(($?)) && return 1;

	echo -e "\nmake -j$(nproc)" |& _log "$install_log" &>/dev/null
	make -j$(nproc) |& _log "$install_log" &>/dev/null || return 1;

	echo -e "$w_l  Installing ${g_l}libdvbcsa$w_l...$re_" | _log "$install_log"
	echo -e "\n$prefix make install" |& _log "$install_log" &>/dev/null
	echo -e "\n$prefix \$(which ldconfig || printf '/sbin/ldconfig') && $prefix \$(which ldconfig || printf '/sbin/ldconfig') -v" |& _log "$install_log" &>/dev/null
	[[ "$prefix" =~ ^su[[:space:]].* ]] && echo -en "$r_l\n  (libdvbcsa installer) Enter $rootuser Password: ";
	$prefix "
			make install || return 1;
			$(which ldconfig || printf '/sbin/ldconfig') && $(which ldconfig || printf '/sbin/ldconfig') -v;
	" |& _log "$install_log" &>/dev/null
	[[ "$prefix" =~ ^su[[:space:]].* ]] && echo
	rm -rf /tmp/libdvbcsa 2>/dev/null
}
